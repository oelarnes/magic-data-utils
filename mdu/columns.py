"""
extension configuration for custom columns.

The extensions defined here can be passed to the appropriate
dataframe function by enum or enum value, as `extensions = []`, etc.

By default no extensions are used, since they are not needed for the base metrics.

Custom extensions can be defined via draft_data_obj.register_extension(
    <view name>, <extension name>, <extension calc>
)

Note that the extension calc must match the signature provided in the examples here.
"""

from dataclasses import dataclass
from enum import StrEnum

import polars as pl


class View(StrEnum):
    GAME = "game_view"
    DRAFT = "draft_view"
    AGG = "agg"  # post-sum calculations such as averages use this regardless of dependencies


class ColType(StrEnum):
    FILTER_ONLY = "filter_only"  # use in filters or calcs, but don't groupby or aggregate
    GROUPBY = "groupby"  # the base view may be grouped by this column
    NAME_SUM = "name_sum"  # columns of the form prefix_[card name], which are summed and unpivoted
    PICKED_SUM = "picked_sum"  # single columns which are grouped by card name and summed
    AGG_CALC = "agg_calc"  # post-sum calculations such as averages.


@dataclass
class DDColumn:
    """
    used to classify existing columns, define library-included columns,
    and register new extensions interactively

    Arguments:
    view: a single view or list of views which may contain this column. Either base views or
    the agg view need to be specified, not both.

    name: the column name, or column prefix for `name_sum` type columns (e.g.
    "deck" for "deck_<cardname")

    col_type: one more of the following. A column may be both groupby and picked_sum, otherwise one type:
        "filter_type": used only in filters and calculated columns
        "groupby": used to group results in game and draft views
        "name_sum": mapped over card names and summed. Cannot reuse existing column names,
            and `.col` must be a sensible column function of an expression like pl.col("^deck_.*$"),
            noting all elements of the regular expression.
        "picked_sum": a single numerical column in the draft view which will be groupbed by "pick"
            along with other groupbys and summed
        "agg_calc": a function of the sum columns generated by the game and draft agg steps. Can 
            be a function of columns from either view. In this step, name_sum columns are accessed
            simply by name, e.g. col('deck') will have value equal to the sum of the column 'deck_<card name>'
            in the row with index name value '<card name>'. So GIHWR = col('in_hand_won') / col('in_hand')
    """

    name: str
    view: View | tuple[View, View]
    col_type: ColType | tuple[ColType, ColType]
    col: pl.functions.col.Col | None = None
    dependencies: list[str] | None = None


class ColName(StrEnum):
    """
    A list of all available columns, including built-in extensions.

    "Name-mapped" columns like "deck_<card name>" are identified by the prefix only.

    New columns may be registered interactively via DraftData().register_column(), named as strings.
    
    The definitions of the columns and how they may be used is defined in `column_defs`
    """
    #    EXPANSION = 'expansion'
    #    EVENT_TYPE = 'event_type'
    DRAFT_ID = "draft_id"
    DRAFT_TIME = "draft_time"
    DRAFT_DATE = "draft_date"
    DRAFT_DAY_OF_WEEK = "draft_day_of_week"
    DRAFT_HOUR = "draft_hour"
    DRAFT_WEEK = "draft_week"
    RANK = "rank"
    EVENT_MATCH_WINS = "event_match_wins"
    EVENT_MATCH_LOSSES = "event_match_losses"
    EVENT_MATCHES = "event_matches"
    IS_TROPHY = "is_trophy"
    PACK_NUMBER = "pack_number"
    PACK_NUM = "pack_num" # plus 1
    PICK_NUMBER = "pick_number"
    PICK_NUM = "pick_num" # plus 1
    PICKED = "picked"
    NAME = "name" # special column for card name index
    PICK_MAINDECK_RATE = "pick_maindeck_rate"
    PICK_SIDEBOARD_IN_RATE = "pick_sideboard_in_rate"
    PACK_CARD = "pack_card"
    PACK_NUM_CARD = "pack_num_card"
    LAST_SEEN = "last_seen"
    POOL = "pool"
    USER_N_GAMES_BUCKET = "user_n_games_bucket"
    USER_GAME_WIN_RATE_BUCKET = "user_game_win_rate_bucket"
    PLAYER_COHORT = "player_cohort"
    # game
    GAME_TIME = "game_time"
    GAME_DATE = "game_date"
    GAME_DAY_OF_WEEK = "game_day_of_week"
    GAME_HOUR = "game_hour"
    GAME_WEEK = "game_week"
    BUILD_INDEX = "build_index"
    MATCH_NUMBER = "match_number"


column_defs = [
    DDColumn(
        name = ColName.DRAFT_ID,
        view = (View.GAME, View.DRAFT),
        col_type = ColType.FILTER_ONLY,
    ),
    DDColumn(
        name = ColName.DRAFT_TIME,
        view = (View.GAME, View.DRAFT),
        col_type = ColType.FILTER_ONLY,
        col = pl.col('draft_time').str.to_time("%+"),
    ),
    DDColumn(
        name = ColName.DRAFT_DATE,
        view = (View.GAME, View.DRAFT),
        col_type = ColType.GROUPBY,
        col = pl.col('draft_time').dt.date(),
        dependencies = [ColName.DRAFT_TIME],
    ),
    DDColumn(
        name = ColName.DRAFT_DAY_OF_WEEK,
        view = (View.GAME, View.DRAFT),
        col_type = ColType.GROUPBY,
        col = pl.col('draft_time').dt.weekday(),
        dependencies = [ColName.DRAFT_TIME],
    ),
    DDColumn(
        name = ColName.DRAFT_HOUR,
        view = (View.GAME, View.DRAFT),
        col_type = ColType.GROUPBY,
        col = pl.col('draft_time').dt.hour(),
        dependencies = [ColName.DRAFT_TIME],
    ),
    DDColumn(
        name = ColName.DRAFT_WEEK,
        view = (View.GAME, View.DRAFT),
        col_type = ColType.GROUPBY,
        col = pl.col('draft_time').dt.week(),
        dependencies = [ColName.DRAFT_TIME],
    ),
    DDColumn(
        name = ColName.RANK,
        view = (View.GAME, View.DRAFT),
        col_type = ColType.GROUPBY,
    ),
    DDColumn(
        name = ColName.EVENT_MATCH_WINS,
        view = View.DRAFT,
        col_type = (ColType.GROUPBY, ColType.PICKED_SUM),
    ),
    DDColumn(
        name = ColName.EVENT_MATCH_LOSSES,
        view = View.DRAFT,
        col_type = (ColType.GROUPBY, ColType.PICKED_SUM),
    ),
    DDColumn(
        name = ColName.EVENT_MATCHES,
        view = View.DRAFT,
        col_type = (ColType.GROUPBY, ColType.PICKED_SUM),
        col = pl.col('event_match_wins') + pl.col('event_match_losses'),
    ),
    DDColumn(
        name = ColName.IS_TROPHY,
        view = View.DRAFT,
        col_type = (ColType.GROUPBY, ColType.PICKED_SUM),
        col = pl.when(pl.col('event_type') == 'Traditional').then(pl.col('event_match_wins') == 3).otherwise(pl.col('event_match_wins') == 7),
    ),
    DDColumn(
        name = ColName.PACK_NUMBER,
        view = View.DRAFT,
        col_type = (ColType.GROUPBY, ColType.PICKED_SUM),
    ),
    DDColumn(
        name = ColName.PACK_NUM,
        view = View.DRAFT,
        col_type = (ColType.GROUPBY, ColType.PICKED_SUM),
        col = pl.col('pack_number') + 1
    ),
    DDColumn(
        name = ColName.PICK_NUMBER,
        view = View.DRAFT,
        col_type = (ColType.GROUPBY, ColType.PICKED_SUM),
    ),
    DDColumn(
        name = ColName.PICK_NUM,
        view = View.DRAFT,
        col_type = (ColType.GROUPBY, ColType.PICKED_SUM),
        col = pl.col('pick_number') + 1
    ),
    DDColumn(
        name = ColName.PICKED,
        view = View.DRAFT,
        col_type = ColType.FILTER_ONLY # will be renamed to "name" for groupby
    ),
    DDColumn(
        name = ColName.NAME,
        view = (View.DRAFT, View.GAME),
        col_type = ColType.GROUPBY,
        # handled by internals, derived from both 'picked' and "name mapped" columns
    ),
    DDColumn(
        name = ColName.PICK_MAINDECK_RATE,
        view = View.DRAFT,
        col_type = ColType.PICKED_SUM,
    ),
    DDColumn(
        name = ColName.PICK_SIDEBOARD_IN_RATE,
        view = View.DRAFT,
        col_type = ColType.PICKED_SUM,
    ),
    DDColumn(
        name = ColName.PACK_CARD,
        view = View.DRAFT,
        col_type = ColType.NAME_SUM,
    ),
    DDColumn(
        name = ColName.PACK_NUM_CARD,
        view = View.DRAFT,
        col_type = ColType.NAME_SUM,
        col = pl.col('^pack_card_.*$') * pl.col('pack_num')
    ),
    DDColumn(
        name = ColName.LAST_SEEN,
        view = View.DRAFT,
        col_type = ColType.NAME_SUM,
        col = pl.col('^pack_card_.*$') * pl.min_horizontal('pack_num', 8)
    ),
    DDColumn(
        name = ColName.POOL,
        view = View.DRAFT,
        col_type = ColType.NAME_SUM,
    ),
    DDColumn(
        name = ColName.USER_N_GAMES_BUCKET,
        view = (View.DRAFT, View.GAME),
        col_type = ColType.GROUPBY,
    ),
    DDColumn(
        name = ColName.USER_GAME_WIN_RATE_BUCKET,
        view = (View.DRAFT, View.GAME),
        col_type = ColType.GROUPBY,
    ),
    DDColumn(
        name = ColName.PLAYER_COHORT,
        view = (View.DRAFT, View.GAME),
        col_type = ColType.GROUPBY,
        col = pl.when(pl.col('user_n_games_bucket') < 100).then('All').otherwise(
            pl.when(pl.col('user_game_win_rate_bucket') > 0.57).then('Top').otherwise(
                pl.when(pl.col('user_game_win_rate_bucket') < 0.49).then('Bottom').otherwise('Middle')))
    ),
    DDColumn(
        name = ColName.GAME_TIME,
        view = View.GAME,
        col_type = ColType.FILTER_ONLY,
        col = pl.col('game_time').str.to_time("%+"),
    ),
    DDColumn(
        name = ColName.GAME_DATE,
        view = View.GAME,
        col_type = ColType.GROUPBY,
        col = pl.col('game_time').dt.date(),
        dependencies = [ColName.GAME_TIME],
    ),
    DDColumn(
        name = ColName.GAME_DAY_OF_WEEK,
        view = View.GAME,
        col_type = ColType.GROUPBY,
        col = pl.col('game_time').dt.weekday(),
        dependencies = [ColName.GAME_TIME],
    ),
    DDColumn(
        name = ColName.GAME_HOUR,
        view = View.GAME,
        col_type = ColType.GROUPBY,
        col = pl.col('game_time').dt.hour(),
        dependencies = [ColName.GAME_TIME],
    ),
    DDColumn(
        name = ColName.GAME_WEEK,
        view = View.GAME,
        col_type = ColType.GROUPBY,
        col = pl.col('game_time').dt.week(),
        dependencies = [ColName.GAME_TIME],
    ),
    DDColumn(
        name = ColName.BUILD_INDEX,
        view = View.GAME,
        col_type = ColType.GROUPBY,
    ),
    DDColumn(
        name = ColName.MATCH_NUMBER,
        view = View.GAME,
        col_type = ColType.GROUPBY,
    ),
]
